class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
         
            fast = head 
            slow = head
            while(fast != None and fast.next != None):
                fast = fast.next.next
                slow = slow.next
                if(slow == fast ):
                    return True
                
            return False    
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        fast,slow = head,head
        while(fast != None and fast.next != None):
            fast = fast.next.next
            slow =slow.next 
            if(fast == slow ):
                current = head
                while(current != slow ):
                    current = current.next
                    slow = slow.next 
                return slow
        return None   

    def getIntersectionNode(self, headA: ListNode, headB: ListNode) :
        h1 = headA
        h2 = headB
        
        while h1 != h2:
            if(not h1):
                h1 = headB
            else:
                h1 = h1.next
                
                
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        curr = head 
        
        while(curr):  
          nex = curr.next
          curr.next = prev
          prev = curr
          curr = nex
        
        return prev                
            
            if(not h2):
                h2 = headA
            else:    
                h2 = h2.next
                
        return h1        
        
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        fast , slow = head , head
        
        for i in range(n):
            fast = fast.next
            
        if(not fast) : return head.next
        while( fast.next ):
            fast = fast.next
            slow = slow.next
        slow.next = slow.next.next
        return head        
